<#+
    public class ModelTemplate: CSharpTemplate {
        private TableInfo table;
        private IEnumerable<ColumnInfo> columnList;
        private IEnumerable<ForeignKeyInfo> foreignList;

        public ModelTemplate(TableInfo table,  IEnumerable<ColumnInfo> columnList, IEnumerable<ForeignKeyInfo> foreignList){
            this.table = table;
            this.columnList = columnList;
            this.foreignList = foreignList;
        }

        public override string TransformText(){
#>
// ========================================
// This file is generated by T4, DO NOT MODIFY!
// <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>
// ========================================

using FYH.Cookbook.Model.Extensions;
using NHibernate.Mapping.Attributes;
using System;

namespace FYH.Cookbook.Model.DBEntity
{
    /// <summary>
<#+ foreach (var description in table.Descriptions) { #>
    /// <#= description #>
<#+ } #>
    /// </summary>
    [Class(0, Table = "<#= table.TableName #>")]
    [Cache(1, Usage = CacheUsage.ReadWrite)]
    public class <#= table.TableName #>
    {
        public const string TABLE_NAME = "<#= table.TableName #>";
<#+ foreach (var column in this.columnList) { #>
        public const string COL_<#= column.ColumnName.ToUpper() #> = "<#= column.ColumnName #>";
<#+ } #>

<#+ foreach (var column in this.columnList) {
            var parameters = new List<string>();
            if (!column.IsColumnValueNullable) {
                parameters.Add("NotNull = true");
            }
            if (column.ColumnType == "string") {
                parameters.Add("Length = " + column.Length);
            }
#>

        /// <summary>
<#+ foreach (var description in column.Descriptions) { #>
        /// <#= description #>
<#+ } #>
        /// </summary>
<#+ if (column.IsPrimaryKey) { #>
        [Id(0, Name = "<#= column.ColumnName #>", Column = "<#= column.ColumnName #>", TypeType = typeof(<#= column.ColumnType #>)<#= parameters.Count > 0 ? ", " + string.Join(", ", parameters) : string.Empty #>)]
        [Key(1)]
<#+ if (column.IsIdentity) { #>
        [Generator(2, Class = "native")]
<#+ } else { #>
        [Generator(2, Class = "assigned")]
<#+ } #>
<#+ } else { #>
        [Property(<#= string.Join(", ", parameters) #>)]
<#+ } #>
        public virtual <#= column.ColumnType #><#= column.IsColumnTypeNullable ? "?" : "" #> <#= column.ColumnName #> { get; set; }
<#+
        var foreign = foreignList.FirstOrDefault(f => f.ColumnName == column.ColumnName);
        if (foreign != null) {
            var instanceFieldName = "_" + foreign.ColumnPropertyName[0].ToString().ToLower() + foreign.ColumnPropertyName.Substring(1);
#>

        private <#= foreign.FK_TableName #> <#= instanceFieldName #> = null;
        /// <summary>
<#+ foreach (var description in DBInfoHelper.ConvertFKPropertyDescriptions(column.ColumnName, foreign.FK_TableName)) { #>
        /// <#= description #>
<#+ } #>
        /// </summary>
        [Core.Attributes.IgnoreConvertTypeScalar]
        public virtual <#= foreign.FK_TableName #> <#= foreign.ColumnPropertyName #> { get { return <#= instanceFieldName #> ?? (<#= instanceFieldName #> = NHibernateExtension.GetEntityById<<#= foreign.FK_TableName #>>(<#= column.ColumnName #>)); } }
<#+
        }
    }
#>
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>